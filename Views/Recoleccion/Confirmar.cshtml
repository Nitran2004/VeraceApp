@model ProyectoIdentity.Models.CollectionPoint
@{
    ViewData["Title"] = "Confirmar Punto de Recolección";

    // Valores por defecto para Quito si no hay coordenadas
    if (ViewBag.UserLat == null) { ViewBag.UserLat = -0.1857; }
    if (ViewBag.UserLng == null) { ViewBag.UserLng = -78.4954; }
    if (ViewBag.Distancia == null) { ViewBag.Distancia = 3.5; }

    // Es crucial obtener el ID del punto de recolección
    int puntoRecoleccionId = ViewBag.PuntoRecoleccionId ?? 0;
}
<div class="container mt-4">
    <!-- Mostrar mensajes de error si existen -->
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <p>Pedido ID: @ViewBag.PedidoId</p>
    <p>Punto ID: @ViewBag.PuntoRecoleccionId</p>
    <div class="card">
        <div class="card-header bg-success text-white">
            <h2 class="mb-0">Confirma tu punto de recolección</h2>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Detalles del punto de recolección</h5>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@Model.Name</h5>
                            <p class="card-text">
                                <strong>Sucursal:</strong> @Model.Sucursal.Nombre<br />
                                <strong>Dirección:</strong> @Model.Address<br />
@*                                 <strong>Descripción:</strong> @Model.Descripcion
 *@                            </p>
                            <p class="card-text">
                                <strong>Distancia:</strong>
                                <span class="@(ViewBag.Distancia < 3 ? "text-success" : (ViewBag.Distancia < 7 ? "text-warning" : "text-danger"))">
                                    @ViewBag.Distancia km
                                    @if (ViewBag.Distancia < 3)
                                    {
                                        <i class="fas fa-check-circle"></i>
                                    }
                                </span>
                            </p>
                            <div class="small text-muted">
                                <p>ID Punto: @puntoRecoleccionId</p>
                                <p id="coordsInfo">Coordenadas calculadas: Usuario (@ViewBag.UserLat, @ViewBag.UserLng), Sucursal (@Model.Sucursal.Latitud, @Model.Sucursal.Longitud)</p>
                            </div>
                        </div>
                    </div>
                    @*
                    <div class="card mb-4">
                    <div class="card-header bg-light">
                    <h5 class="mb-0">Mapa</h5>
                    </div>
                    <div class="card-body">
                    <div id="mapa" style="height: 300px; width: 100%;"></div>
                    <div id="mapError" class="alert alert-danger mt-2" style="display: none;">
                    Error al cargar el mapa. Verifique su conexión a internet.
                    </div>
                    </div>
                    </div> *@
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Instrucciones</h5>
                        </div>
                        <div class="card-body">
                            <p>Una vez confirmes tu pedido:</p>
                            <ul>
                                <li>Recibirás una confirmación con el número de tu pedido</li>
                                <li>Podrás recoger tu pedido en el punto seleccionado en aproximadamente 20-30 minutos</li>
                                <li>Cuando llegues, menciona el número de tu pedido</li>
                            </ul>

                            @if (ViewBag.Distancia > 5)
                            {
                                <div class="alert alert-warning mt-3">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <strong>Nota:</strong> Te encuentras a más de 5 km de distancia.
                                    Considera el tiempo de viaje para recoger tu pedido.
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-4 d-flex justify-content-between">
                <a href="@Url.Action("Seleccionar", "Recoleccion")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Elegir otro punto
                </a>

                <!-- Formulario para finalizar el pedido -->
                @if (puntoRecoleccionId > 0)
                {
                    <form asp-action="FinalizarPedido" asp-controller="Recoleccion" method="post"
                          onsubmit="return confirmarFinalizacion();">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="puntoRecoleccionId" value="@puntoRecoleccionId" />
                        <button type="submit" class="btn btn-success" id="btnFinalizar">
                            <i class="fas fa-check"></i> Confirmar y finalizar pedido
                        </button>
                    </form>
                }
                else
                {
                    <button class="btn btn-secondary" disabled>
                        <i class="fas fa-exclamation-triangle"></i> Error: No se puede finalizar
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Incluir Leaflet para el mapa -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

    <script>
        // Función para confirmar antes de finalizar
        function confirmarFinalizacion() {
            // Deshabilitar el botón para evitar doble clic
            const btn = document.getElementById('btnFinalizar');
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';

            return true; // Permitir el envío del formulario
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Código del mapa (igual que antes)
            const defaultLat = -0.1857;
            const defaultLng = -78.4954;

            let userLat = @ViewBag.UserLat;
            let userLng = @ViewBag.UserLng;
            let sucursalLat = @Model.Sucursal.Latitud;
            let sucursalLng = @Model.Sucursal.Longitud;

            // Validar coordenadas
            if (isNaN(userLat) || isNaN(userLng) || Math.abs(userLat) > 90 || Math.abs(userLng) > 180) {
                console.warn("Coordenadas de usuario inválidas, usando valores por defecto");
                userLat = defaultLat;
                userLng = defaultLng;
            }

            if (isNaN(sucursalLat) || isNaN(sucursalLng) || Math.abs(sucursalLat) > 90 || Math.abs(sucursalLng) > 180) {
                console.warn("Coordenadas de sucursal inválidas, usando valores por defecto");
                sucursalLat = -0.180653;
                sucursalLng = -78.467834;
            }

            console.log("Coordenadas para el mapa:");
            console.log("Usuario:", userLat, userLng);
            console.log("Sucursal:", sucursalLat, sucursalLng);

            try {
                // Crear mapa
                const map = L.map('mapa').setView([
                    (userLat + sucursalLat) / 2,
                    (userLng + sucursalLng) / 2
                ], 13);

                // Añadir capa de mapa
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);

                // Añadir marcador para el usuario
                const userMarker = L.marker([userLat, userLng])
                    .addTo(map)
                    .bindPopup('Tu ubicación')
                    .openPopup();

                // Añadir marcador para la sucursal
                const sucursalMarker = L.marker([sucursalLat, sucursalLng])
                    .addTo(map)
                    .bindPopup('@Model.Sucursal.Nombre');

                // Añadir línea entre los dos puntos
                const polyline = L.polyline([
                    [userLat, userLng],
                    [sucursalLat, sucursalLng]
                ], { color: 'blue' }).addTo(map);

                // Ajustar la vista para que se vean ambos marcadores
                map.fitBounds(polyline.getBounds());

                // Etiqueta con la distancia
                const midPoint = [
                    (userLat + sucursalLat) / 2,
                    (userLng + sucursalLng) / 2
                ];

                L.marker(midPoint, {
                    icon: L.divIcon({
                        className: 'distance-label',
                        html: '<div style="background: white; padding: 5px; border-radius: 5px; border: 1px solid #ccc; font-weight: bold;">' +
                            '@ViewBag.Distancia km</div>',
                        iconSize: [80, 30],
                        iconAnchor: [40, 15]
                    })
                }).addTo(map);
            } catch (error) {
                console.error("Error al cargar el mapa:", error);
                document.getElementById('mapa').style.display = 'none';
                document.getElementById('mapError').style.display = 'block';
            }

            // Función para calcular la distancia
            function calcularDistancia(lat1, lon1, lat2, lon2) {
                const toRad = function (deg) {
                    return deg * (Math.PI / 180);
                };

                const R = 6371; // Radio de la Tierra en kilómetros
                const dLat = toRad(lat2 - lat1);
                const dLon = toRad(lon2 - lon1);

                const a =
                    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);

                const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                return R * c;
            }
        });
    </script>
}