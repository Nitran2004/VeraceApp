@model IEnumerable<ProyectoIdentity.Models.Producto>
@{
    ViewData["Title"] = "Selección múltiple de productos";
}

<style>
    .product-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .product-card {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 15px;
        text-align: center;
        background-color: #fff;
        transition: transform 0.2s, box-shadow 0.3s;
        position: relative;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .product-card.selected {
        border: 2px solid #28a745;
        background-color: #f8fff8;
    }

    .product-img {
        width: 100%;
        height: 140px;
        object-fit: cover;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .product-name {
        font-weight: bold;
        margin-bottom: 5px;
        font-size: 1.1em;
    }

    .product-price {
        color: #e83e8c;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .product-controls {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    }

    .quantity-control {
        display: flex;
        align-items: center;
    }

    .quantity-btn {
        background-color: #f0f0f0;
        border: none;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        font-weight: bold;
        cursor: pointer;
    }

    .quantity-input {
        width: 50px;
        text-align: center;
        margin: 0 5px;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 5px;
    }

    .category-filter {
        margin-bottom: 20px;
    }

    .category-btn {
        margin-right: 10px;
        margin-bottom: 10px;
        padding: 8px 12px;
        border-radius: 20px;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
        cursor: pointer;
        transition: all 0.2s;
    }

    .category-btn:hover, .category-btn.active {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }

    .add-to-cart-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
        padding: 15px;
        z-index: 1000;
    }

    .cart-summary {
        text-align: center;
        margin-bottom: 10px;
    }

    .cart-total {
        font-weight: bold;
        color: #e83e8c;
        font-size: 1.2em;
    }

    .cart-count {
        background-color: #28a745;
        color: white;
        border-radius: 50%;
        padding: 5px 10px;
        margin-left: 5px;
    }

    .add-to-cart-btn {
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
        transition: background-color 0.3s;
    }

    .add-to-cart-btn:hover {
        background-color: #218838;
    }

    .add-to-cart-btn:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }

    /* Estilos responsivos */
    media (max-width: 768px) {
        .product-grid {
            grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        }
    }
</style>

<div class="container">
    <h2 class="mb-4">Selección múltiple de productos</h2>
    
    <!-- Filtro de categorías -->
    <div class="category-filter">
        <button class="category-btn active" data-category="todas">Todas</button>
        @foreach(var categoria in ViewBag.Categorias)
        {
            <button class="category-btn" data-category="@categoria">@categoria</button>
        }
    </div>

    <form asp-controller="Productos" asp-action="ProcesarSeleccionMultiple" method="post">
        @Html.AntiForgeryToken()
        <!-- Contenedor de productos -->
        <div class="product-grid">
            @{
                int index = 0;
            }
            @foreach (var producto in Model)
            {
                <div class="product-card" data-categoria="@producto.Categoria">
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(producto.Imagen)" 
                         alt="@producto.Nombre" class="product-img" />
                    <div class="product-name">@producto.Nombre</div>
                    <div class="product-price">$@producto.Precio</div>
                    
                    <div class="product-controls">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input producto-checkbox" 
                                   id="check-@producto.Id" 
                                   name="seleccionados[@index].Seleccionado" 
                                   value="true" 
                                   data-id="@producto.Id" />
                            <label class="form-check-label" for="check-@producto.Id">
                                Seleccionar
                            </label>
                        </div>
                        
                        <input type="hidden" name="seleccionados[@index].ProductoId" value="@producto.Id" />
                        
                        <div class="quantity-control">
                            <button type="button" class="quantity-btn decrease-btn" data-id="@producto.Id">-</button>
                            <input type="number" class="quantity-input" 
                                   name="seleccionados[@index].Cantidad" 
                                   value="1" min="1" max="99" 
                                   data-id="@producto.Id" />
                            <button type="button" class="quantity-btn increase-btn" data-id="@producto.Id">+</button>
                        </div>
                    </div>
                </div>
                index++;
            }
        </div>

        <!-- Al final del formulario: -->
        <div class="mt-4 text-center">
            <button type="submit" class="btn btn-primary btn-lg">
                <i class="fas fa-shopping-cart me-2"></i> Continuar con el pedido
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const productCards = document.querySelectorAll('.product-card');
            const checkboxes = document.querySelectorAll('.producto-checkbox');
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const decreaseBtns = document.querySelectorAll('.decrease-btn');
            const increaseBtns = document.querySelectorAll('.increase-btn');
            const submitBtn = document.getElementById('submit-btn');
            const cartTotal = document.querySelector('.cart-total');
            const cartCount = document.querySelector('.cart-count');
            const categoryBtns = document.querySelectorAll('.category-btn');
            
            // Función para actualizar el resumen del carrito
            function updateCartSummary() {
                let total = 0;
                let count = 0;
                
                checkboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        const productId = checkbox.getAttribute('data-id');
                        const card = checkbox.closest('.product-card');
                        const price = parseFloat(card.querySelector('.product-price').textContent.replace('$', ''));
                        const quantity = parseInt(card.querySelector('.quantity-input').value);
                        
                        total += price * quantity;
                        count += quantity;
                    }
                });
                
                cartTotal.textContent = '$' + total.toFixed(2);
                cartCount.textContent = count;
                
                // Habilitar/deshabilitar botón de envío
                submitBtn.disabled = count === 0;
            }
            
            // Función para actualizar el estilo de la tarjeta seleccionada
            function updateCardStyle(checkbox) {
                const card = checkbox.closest('.product-card');
                if (checkbox.checked) {
                    card.classList.add('selected');
                } else {
                    card.classList.remove('selected');
                }
            }
            
            // Manejadores de eventos
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    updateCardStyle(this);
                    updateCartSummary();
                });
            });
            
            quantityInputs.forEach(input => {
                input.addEventListener('change', function() {
                    // Asegurar que el valor sea válido
                    let value = parseInt(this.value);
                    if (isNaN(value) || value < 1) {
                        this.value = 1;
                    } else if (value > 99) {
                        this.value = 99;
                    }
                    
                    updateCartSummary();
                });
            });
            
            decreaseBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = this.getAttribute('data-id');
                    const input = document.querySelector(`.quantity-input[data-id="${productId}"]`);
                    let value = parseInt(input.value);
                    if (value > 1) {
                        input.value = value - 1;
                        updateCartSummary();
                    }
                });
            });
            
            increaseBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const productId = this.getAttribute('data-id');
                    const input = document.querySelector(`.quantity-input[data-id="${productId}"]`);
                    let value = parseInt(input.value);
                    if (value < 99) {
                        input.value = value + 1;
                        updateCartSummary();
                    }
                });
            });
            
            // Filtro de categorías
            categoryBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    // Actualizar botones
                    categoryBtns.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Filtrar productos
                    const categoria = this.getAttribute('data-category');
                    
                    productCards.forEach(card => {
                        if (categoria === 'todas' || card.getAttribute('data-categoria') === categoria) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                });
            });
            
            // Inicializar
            updateCartSummary();
        });
        // Al enviar el formulario
        document.querySelector('form').addEventListener('submit', function (e) {
            console.log('Enviando formulario...');
            const selectedCount = document.querySelectorAll('.producto-checkbox:checked').length;
            console.log('Productos seleccionados:', selectedCount);
        });
    </script>
}